// Generated by CoffeeScript 1.4.0
var start;

start = function() {
  var app, div, xsize, ysize;
  div = document.getElementById('app');
  xsize = 640;
  ysize = 480;
  app = new App(div, xsize, ysize);
  app.addEffect('fire', function(ctx) {
    return new Fire(ctx, xsize, ysize);
  });
  app.addEffect('starfield', function(ctx) {
    return new Starfield(ctx, xsize, ysize);
  });
  app.addEffect('cube', function(ctx) {
    return new Cube(ctx, xsize, ysize);
  });
  app.addEffect('wormhole', function(ctx) {
    return new Wormhole(ctx, xsize, ysize);
  });
  app.addEffect('delta', function(ctx) {
    return new Delta(ctx, xsize, ysize);
  });
  return app.start();
};
// Generated by CoffeeScript 1.8.0
var Fire,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Fire = (function() {
  function Fire(ctx, xsize, ysize) {
    var buf;
    this.ctx = ctx;
    this.xsize = xsize;
    this.ysize = ysize;
    this.drawFrame = __bind(this.drawFrame, this);
    this.buffer1 = this.makeBuffer();
    this.buffer2 = this.makeBuffer();
    this.cooling = this.makeBuffer();
    this.imageData = ctx.getImageData(0, 0, this.xsize, this.ysize);
    buf = new ArrayBuffer(this.imageData.data.length);
    this.buf8 = new Uint8ClampedArray(buf);
    this.data = new Uint32Array(buf);
    this.coolingOffset = 0;
    this.prepareCoolingBuffer();
    this.fpsCounter = new FpsCounter(1000);
    this.fpsCounter.start();
    this.request = window.requestAnimationFrame(this.drawFrame);
  }

  Fire.prototype.stop = function() {
    this.fpsCounter.stop();
    window.cancelAnimationFrame(this.request);
    return this.request = void 0;
  };

  Fire.prototype.makeBuffer = function() {
    var buf, x, y, _i, _ref, _results;
    buf = new Array(this.xsize);
    _results = [];
    for (x = _i = 0, _ref = this.xsize - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      buf[x] = new Array(this.ysize);
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (y = _j = 0, _ref1 = this.ysize - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          _results1.push(buf[x][y] = 0);
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Fire.prototype.prepareCoolingBuffer = function() {
    var i, randomIntFromInterval, smooth, v, x, y, _i, _j, _results;
    randomIntFromInterval = function(min, max) {
      return Math.floor(Math.random() * (max - min + 1) + min);
    };
    for (i = _i = 1; _i <= 1000; i = ++_i) {
      x = randomIntFromInterval(1, this.xsize - 2);
      y = randomIntFromInterval(1, this.ysize - 2);
      v = randomIntFromInterval(0, 0xff);
      this.cooling[x][y] = v;
    }
    smooth = (function(_this) {
      return function(buf) {
        var dx, dy, newBuf, _j, _k, _l, _m, _ref, _ref1;
        newBuf = _this.makeBuffer();
        for (x = _j = 1, _ref = _this.xsize - 2; 1 <= _ref ? _j <= _ref : _j >= _ref; x = 1 <= _ref ? ++_j : --_j) {
          for (y = _k = 1, _ref1 = _this.ysize - 2; 1 <= _ref1 ? _k <= _ref1 : _k >= _ref1; y = 1 <= _ref1 ? ++_k : --_k) {
            v = 0;
            for (dx = _l = -1; _l <= 1; dx = ++_l) {
              for (dy = _m = -1; _m <= 1; dy = ++_m) {
                v += buf[x + dx][y + dy];
              }
            }
            v /= 9;
            newBuf[x][y] = v;
          }
        }
        return newBuf;
      };
    })(this);
    _results = [];
    for (i = _j = 1; _j <= 50; i = ++_j) {
      _results.push(this.cooling = smooth(this.cooling));
    }
    return _results;
  };

  Fire.prototype.drawFrame = function() {
    var avalue, bvalue, c, fpsText, gvalue, index, n1, n2, n3, n4, p, rvalue, v, value, x, y, ydest, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3, _ref4;
    this.request = window.requestAnimationFrame(this.drawFrame);
    for (y = _i = _ref = this.ysize - 3, _ref1 = this.ysize - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; y = _ref <= _ref1 ? ++_i : --_i) {
      for (x = _j = 0, _ref2 = this.xsize - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; x = 0 <= _ref2 ? ++_j : --_j) {
        this.buffer1[x][y] = 0x80;
      }
    }
    for (y = _k = 1, _ref3 = this.ysize - 2; 1 <= _ref3 ? _k <= _ref3 : _k >= _ref3; y = 1 <= _ref3 ? ++_k : --_k) {
      for (x = _l = 1, _ref4 = this.xsize - 2; 1 <= _ref4 ? _l <= _ref4 : _l >= _ref4; x = 1 <= _ref4 ? ++_l : --_l) {
        n1 = this.buffer1[x + 1][y];
        n2 = this.buffer1[x - 1][y];
        n3 = this.buffer1[x][y + 1];
        n4 = this.buffer1[x][y - 1];
        c = this.cooling[x][(y + this.coolingOffset) % this.ysize];
        p = (n1 + n2 + n3 + n4) / 4;
        p = p - c;
        if (p < 0) {
          p = 0;
        }
        ydest = y - 1;
        this.buffer2[x][ydest] = p;
        index = ydest * this.xsize + x;
        value = p;
        rvalue = value;
        gvalue = value;
        bvalue = value;
        avalue = 0xff;
        v = rvalue;
        v |= gvalue << 8;
        v |= bvalue << 16;
        v |= avalue << 24;
        this.data[index] = v;
      }
    }
    this.imageData.data.set(this.buf8);
    this.ctx.putImageData(this.imageData, 0, 0);
    this.buffer1 = this.buffer2;
    this.coolingOffset++;
    fpsText = this.fpsCounter.tick();
    this.ctx.fillStyle = "red";
    return this.ctx.fillText(fpsText, 10, 10);
  };

  return Fire;

})();
// Generated by CoffeeScript 1.8.0
var Starfield,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Starfield = (function() {
  function Starfield(ctx, xsize, ysize) {
    var nstars, _;
    this.ctx = ctx;
    this.xsize = xsize;
    this.ysize = ysize;
    this.drawFrame = __bind(this.drawFrame, this);
    nstars = 200;
    this.stars = (function() {
      var _i, _results;
      _results = [];
      for (_ = _i = 1; 1 <= nstars ? _i <= nstars : _i >= nstars; _ = 1 <= nstars ? ++_i : --_i) {
        _results.push(this.randomStar());
      }
      return _results;
    }).call(this);
    this.request = window.requestAnimationFrame(this.drawFrame);
  }

  Starfield.prototype.randomStar = function() {
    var x, y;
    x = Math.floor(Math.random() * this.xsize);
    y = Math.floor(Math.random() * this.ysize);
    return [x, y];
  };

  Starfield.prototype.stop = function() {
    window.cancelAnimationFrame(this.request);
    return this.request = void 0;
  };

  Starfield.prototype.drawFrame = function() {
    var x, y, _i, _len, _ref, _ref1;
    this.request = window.requestAnimationFrame(this.drawFrame);
    this.ctx.fillStyle = "black";
    this.ctx.fillRect(0, 0, this.xsize, this.ysize);
    this.ctx.fillStyle = "white";
    _ref = this.stars;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], x = _ref1[0], y = _ref1[1];
      this.ctx.fillRect(x, y, 1, 1);
    }
    return this.scatterStars();
  };

  Starfield.prototype.scatterStars = function() {
    var accel, dx, dy, i, newStar, x, y, _i, _len, _ref, _ref1, _results;
    _ref = this.stars;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      _ref1 = _ref[i], x = _ref1[0], y = _ref1[1];
      accel = 0.01;
      dx = accel * (x - (this.xsize / 2));
      dy = accel * (y - (this.ysize / 2));
      newStar = [x + dx, y + dy];
      if (!this.inbounds(newStar)) {
        newStar = this.randomStar();
      }
      _results.push(this.stars[i] = newStar);
    }
    return _results;
  };

  Starfield.prototype.inbounds = function(_arg) {
    var x, y;
    x = _arg[0], y = _arg[1];
    return (0 <= x) && (x < this.xsize) && (0 <= y) && (y < this.xsize);
  };

  return Starfield;

})();
// Generated by CoffeeScript 1.8.0
var Cube,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Cube = (function() {
  function Cube(ctx, xsize, ysize) {
    var a, b, c, d, e, f, g, h;
    this.ctx = ctx;
    this.xsize = xsize;
    this.ysize = ysize;
    this.drawFrame = __bind(this.drawFrame, this);
    this.request = window.requestAnimationFrame(this.drawFrame);
    "G ------- H /|        /| y  / |       / | ^ /  |   z  /  | |/   |  /  /   | E ------- F    | |    |/   |    | |    C ---|--- D |   /     |   / |  /      |  / | /       | / |/        |/ A ------- B --> x";
    a = [-1, -1, -1];
    b = [+1, -1, -1];
    c = [-1, +1, -1];
    d = [+1, +1, -1];
    e = [-1, -1, +1];
    f = [+1, -1, +1];
    g = [-1, +1, +1];
    h = [+1, +1, +1];
    this.edges = [[a, b], [a, c], [b, d], [c, d], [e, f], [e, g], [f, h], [g, h], [a, e], [b, f], [c, g], [d, h]];
    this.frameNum = 0;
  }

  Cube.prototype.stop = function() {
    window.cancelAnimationFrame(this.request);
    return this.request = void 0;
  };

  Cube.prototype.drawFrame = function() {
    var omega, p1, p2, position, x1, x2, y1, y2, _i, _len, _ref, _ref1, _ref2, _ref3;
    this.request = window.requestAnimationFrame(this.drawFrame);
    omega = 0.05;
    this.frameNum++;
    position = {
      x: 3 * Math.cos(omega * this.frameNum),
      y: 3 * Math.sin(omega * this.frameNum),
      z: -10
    };
    this.ctx.fillStyle = "black";
    this.ctx.fillRect(0, 0, this.xsize, this.ysize);
    this.ctx.strokeStyle = "white";
    this.ctx.beginPath();
    _ref = this.edges;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], p1 = _ref1[0], p2 = _ref1[1];
      _ref2 = this.threeToTwo(p1, position), x1 = _ref2[0], y1 = _ref2[1];
      _ref3 = this.threeToTwo(p2, position), x2 = _ref3[0], y2 = _ref3[1];
      this.ctx.moveTo(x1, y1);
      this.ctx.lineTo(x2, y2);
    }
    return this.ctx.stroke();
  };

  Cube.prototype.threeToTwo = function(_arg, position) {
    var px, py, pz, sx, sy, x, y, z, zoom;
    px = _arg[0], py = _arg[1], pz = _arg[2];
    x = position.x - px;
    y = position.y - py;
    z = position.z - pz;
    zoom = Math.min(this.xsize, this.ysize);
    sx = zoom * (x / z - position.x / position.z) + this.xsize / 2;
    sy = zoom * (y / z - position.y / position.z) + this.ysize / 2;
    return [sx, sy];
  };

  return Cube;

})();
// Generated by CoffeeScript 1.8.0
var Wormhole,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Wormhole = (function() {
  function Wormhole(ctx, xsize, ysize) {
    var buf;
    this.ctx = ctx;
    this.xsize = xsize;
    this.ysize = ysize;
    this.drawFrame = __bind(this.drawFrame, this);
    this.spokes = 1600;
    this.divs = this.spokes / 2;
    this.dx = 0;
    this.dy = 0;
    this.spokeCosCalc = new Array(this.spokes);
    this.spokeSinCalc = new Array(this.spokes);
    this.initTables();
    this.imageData = this.ctx.getImageData(0, 0, this.xsize, this.ysize);
    buf = new ArrayBuffer(this.imageData.data.length);
    this.buf8 = new Uint8ClampedArray(buf);
    this.data = new Uint32Array(buf);
    this.fpsCounter = new FpsCounter(1000);
    this.fpsCounter.start();
    this.request = window.requestAnimationFrame(this.drawFrame);
  }

  Wormhole.prototype.initTables = function() {
    var i, sc, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.spokes - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      sc = 2 * Math.PI * i / this.spokes;
      this.spokeCosCalc[i] = Math.cos(sc);
      _results.push(this.spokeSinCalc[i] = Math.sin(sc));
    }
    return _results;
  };

  Wormhole.prototype.stop = function() {
    this.fpsCounter.stop();
    window.cancelAnimationFrame(this.request);
    return this.request = void 0;
  };

  Wormhole.prototype.drawFrame = function() {
    var divCalcX, divCalcY, fpsText, i, index, j, texturex, texturey, x, xcenter, y, ycenter, z, _, _i, _j, _k, _len, _ref, _ref1, _ref2;
    this.request = window.requestAnimationFrame(this.drawFrame);
    this.ctx.fillStyle = "black";
    this.ctx.fillRect(0, 0, this.xsize, this.ysize);
    this.dx = (this.dx + 1) % 40;
    this.dy = (this.dy + 1) % 40;
    xcenter = 5 * this.xsize / 8;
    ycenter = this.ysize / 4;
    _ref = this.data;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      _ = _ref[i];
      this.data[i] = 0xff000000;
    }
    for (j = _j = 0, _ref1 = this.divs - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
      z = -1.0 + Math.log(2.0 * j / this.divs);
      divCalcX = this.xsize * j / this.divs;
      divCalcY = this.ysize * j / this.divs;
      for (i = _k = 0, _ref2 = this.spokes - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        x = divCalcX * this.spokeCosCalc[i];
        y = divCalcY * this.spokeSinCalc[i];
        y = y - 25 * z;
        x += xcenter;
        y += ycenter;
        x |= 0;
        y |= 0;
        if ((0 <= x) && (x < this.xsize) && (0 <= y) && (y < this.ysize)) {
          texturex = ((i / 8) % 40) | 0;
          texturey = ((j / 6) % 40) | 0;
          index = y * this.xsize + x;
          if ((texturex % 20 === this.dx % 20) || (texturey % 20 === this.dy % 20)) {
            this.data[index] = 0xffffffff;
          }
        }
      }
    }
    this.imageData.data.set(this.buf8);
    this.ctx.putImageData(this.imageData, 0, 0);
    fpsText = this.fpsCounter.tick();
    this.ctx.fillStyle = "red";
    return this.ctx.fillText(fpsText, 10, 10);
  };

  return Wormhole;

})();
// Generated by CoffeeScript 1.8.0
var Delta,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Delta = (function() {
  function Delta(ctx, xsize, ysize) {
    var i;
    this.ctx = ctx;
    this.xsize = xsize;
    this.ysize = ysize;
    this.drawFrame = __bind(this.drawFrame, this);
    this.request = window.requestAnimationFrame(this.drawFrame);
    this.rects = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 1; _i <= 18; i = ++_i) {
        _results.push(Math.pow(0.05, i / 9));
      }
      return _results;
    })();
    this.accel = 1 + 0.001;
    this.audioCtx = new AudioContext();
    this.tones = [];
    this.phase = 0;
    this.overlap = 4;
    this.freqStart = 55;
    this.freqEnd = 220;
    this.drawDebug = false;
    document.onkeydown = (function(_this) {
      return function() {
        return _this.drawDebug = true;
      };
    })(this);
    document.onkeyup = (function(_this) {
      return function() {
        return _this.drawDebug = false;
      };
    })(this);
  }

  Delta.prototype.stop = function() {
    var osc, _, _i, _len, _ref, _ref1;
    window.cancelAnimationFrame(this.request);
    this.request = void 0;
    _ref = this.tones;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], osc = _ref1[0], _ = _ref1[1];
      osc.stop();
    }
    document.onkeydown = void 0;
    return document.onkeyup = void 0;
  };

  Delta.prototype.startTone = function(_arg) {
    var gain, osc;
    osc = _arg[0], gain = _arg[1];
    osc.start();
    return gain.connect(this.audioCtx.destination);
  };

  Delta.prototype.stopTone = function(_arg) {
    var gain, osc;
    osc = _arg[0], gain = _arg[1];
    return osc.stop();
  };

  Delta.prototype.newTone = function() {
    var freq, gain, osc, tone;
    osc = this.audioCtx.createOscillator();
    gain = this.audioCtx.createGain();
    osc.type = 'triangle';
    osc.connect(gain);
    tone = [osc, gain];
    freq = this.freqStart;
    osc.frequency.value = freq;
    gain.gain.value = 0;
    return [osc, gain];
  };

  Delta.prototype.drawFrame = function() {
    var i, size, tone, _i, _j, _len, _len1, _ref, _ref1, _results;
    this.request = window.requestAnimationFrame(this.drawFrame);
    this.ctx.fillStyle = "red";
    this.ctx.fillRect(0, 0, this.xsize, this.ysize);
    this.ctx.strokeStyle = "white";
    _ref = this.rects;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      size = _ref[i];
      this.drawRect(size);
      size *= this.accel;
      if (size >= 1) {
        size = 0.05;
        this.updateTones();
      }
      this.rects[i] = size;
    }
    this.phase += 3 * (Math.log(this.accel));
    _ref1 = this.tones;
    _results = [];
    for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
      tone = _ref1[i];
      _results.push(this.adjustTone(tone, i));
    }
    return _results;
  };

  Delta.prototype.drawRect = function(size) {
    var lw, x, xs, y, ys;
    lw = 10 * size;
    this.ctx.lineWidth = lw;
    xs = size * this.xsize;
    ys = size * this.ysize;
    x = (this.xsize - xs) / 2;
    y = (this.ysize - ys) / 2;
    return this.ctx.strokeRect(x, y, xs, ys);
  };

  Delta.prototype.updateTones = function() {
    var tone;
    this.phase = 0;
    if (this.tones.length >= this.overlap) {
      tone = this.tones.pop();
      return this.tones.unshift(tone);
    } else {
      tone = this.newTone();
      this.startTone(tone);
      return this.tones.unshift(tone);
    }
  };

  Delta.prototype.adjustTone = function(_arg, i) {
    var freq, g, gain, osc, phi, x;
    osc = _arg[0], gain = _arg[1];
    phi = (i + this.phase) / this.overlap;
    g = 0.5 - 0.5 * Math.cos(phi * 2 * Math.PI);
    gain.gain.value = g;
    freq = this.freqStart + phi * (this.freqEnd - this.freqStart);
    osc.frequency.value = freq;
    if (this.drawDebug) {
      x = this.freqStart / 2;
      this.ctx.fillStyle = "green";
      this.ctx.fillRect(x, 0, (this.freqEnd - this.freqStart) / 2, 10);
      this.ctx.fillRect(x, 10 * (i + 1), (freq - this.freqStart) / 2, 10);
      x = 500;
      this.ctx.fillStyle = "blue";
      this.ctx.fillRect(x, 0, 100, 10);
      return this.ctx.fillRect(x, 10 * (i + 1), g * 100, 10);
    }
  };

  return Delta;

})();
// Generated by CoffeeScript 1.8.0
var App,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

App = (function() {
  function App(div, xsize, ysize) {
    var aboutDiv, canvas, demoDiv;
    this.div = div;
    this.xsize = xsize;
    this.ysize = ysize;
    this.changeFx = __bind(this.changeFx, this);
    this.onIFrameLoad = __bind(this.onIFrameLoad, this);
    this.onHashChange = __bind(this.onHashChange, this);
    this.defaultFX = 'cube';
    demoDiv = document.createElement('div');
    demoDiv.className = 'demo';
    demoDiv.style.width = this.xsize + 'px';
    this.div.appendChild(demoDiv);
    canvas = document.createElement('canvas');
    canvas.width = this.xsize;
    canvas.height = this.ysize;
    this.ctx = canvas.getContext('2d');
    demoDiv.appendChild(canvas);
    this.fx = null;
    this.ctors = {};
    aboutDiv = document.createElement('div');
    aboutDiv.className = 'about';
    aboutDiv.textContent = "To see the different effects, please click on the 'Jump to' button in the top right corner.";
    demoDiv.appendChild(aboutDiv);
    this.docDiv = document.createElement('div');
    this.docDiv.className = 'documentation';
    this.iframe = document.createElement('iframe');
    this.iframe.src = 'about:blank';
    this.div.appendChild(this.docDiv);
    this.docDiv.appendChild(this.iframe);
  }

  App.prototype.addEffect = function(name, ctor) {
    return this.ctors[name] = ctor;
  };

  App.prototype.start = function() {
    window.onhashchange = this.onHashChange;
    this.iframe.onload = this.onIFrameLoad;
    return this.onHashChange();
  };

  App.prototype.onHashChange = function() {
    var hash, name;
    hash = window.location.hash;
    if (hash === '') {
      hash = '#' + this.defaultFX;
    }
    name = hash.substring(1);
    this.changeFx(name);
    return this.loadDoc(name);
  };

  App.prototype.onIFrameLoad = function() {
    var last, lastPath, name;
    last = function(arr) {
      return arr[arr.length - 1];
    };
    lastPath = last(this.iframe.contentWindow.location.pathname.split('/'));
    name = lastPath.split('.')[0];
    return window.location.hash = "#" + name;
  };

  App.prototype.changeFx = function(name) {
    var ctor;
    if (this.fx != null) {
      this.fx.stop();
    }
    ctor = this.ctors[name];
    return this.fx = ctor(this.ctx);
  };

  App.prototype.loadDoc = function(hash) {
    return this.iframe.src = "docs/" + hash + ".html";
  };

  return App;

})();
// Generated by CoffeeScript 1.8.0
var FpsCounter;

FpsCounter = (function() {
  function FpsCounter(updateMillis) {
    this.updateMillis = updateMillis;
    this.lastCalledTime = Date.now();
    this.fps = 0;
    this.fpsText = '';
    this.drawFpsReady = false;
  }

  FpsCounter.prototype.start = function() {
    return this.interval = window.setInterval(((function(_this) {
      return function() {
        return _this.drawFpsReady = true;
      };
    })(this)), this.updateMillis);
  };

  FpsCounter.prototype.stop = function() {
    window.clearInterval(this.interval);
    return this.interval = void 0;
  };

  FpsCounter.prototype.tick = function() {
    var delta, now;
    now = Date.now();
    delta = (now - this.lastCalledTime) / 1000;
    this.lastCalledTime = now;
    this.fps = (1 / delta).toFixed(1);
    if (this.drawFpsReady) {
      this.fpsText = this.fps;
      this.drawFpsReady = false;
    }
    return this.fpsText;
  };

  return FpsCounter;

})();
